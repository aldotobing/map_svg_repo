<svg id="mapPin" width="45" height="45" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" xml:space="preserve" fill="#000000">
  <defs>
    <radialGradient id="grad1" cx="32" cy="32" r="28" fx="32" fy="32">
      <stop offset="0%" style="stop-color:#ff6666" />
      <stop offset="100%" style="stop-color:#ff0000" />
    </radialGradient>
  </defs>

  <!-- Pin shape with white outline -->
  <path id="pinPath" d="M32 4C19.2 4 8.8 16.8 8.8 30.4c0 12 18.4 27.2 21.6 32a2.4 2.4 0 0 0 3.2 0c3.2-4.8 21.6-20 21.6-32C55.2 16.8 44.8 4 32 4z" fill="url(#grad1)" stroke="#ffffff" stroke-width="1" />

  <!-- Dynamic number, with Roboto font -->
  <text id="number" x="50%" y="45%" text-anchor="middle" dominant-baseline="central" font-family="'Roboto', Arial" font-size="16" fill="#000000">123</text>

  <script>
    const svgElement = document.getElementById('mapPin');
    const pinPathElement = document.getElementById('pinPath');
    const numberElement = document.getElementById('number');

    // Adjustment on text change
    numberElement.addEventListener('DOMCharacterDataModified', () => {
      adjustNumberPosition(numberElement.textContent);
    });

    // Function to adjust the number position based on its width
    function adjustNumberPosition(text) {
      const textWidth = numberElement.getComputedTextLength();
      const radius = textWidth / 2 + 8; // Add 8 to account for some padding
      numberElement.setAttribute('x', `${radius + 4}`);
    }

    // Initial adjustment
    adjustNumberPosition(numberElement.textContent);

    // Color change function
    function changeColor(color) {
      pinPathElement.setAttribute('fill', `url(#grad1)`);
      const stops = svgElement.querySelectorAll('radialGradient stop');
      stops[0].setAttribute('style', `stop-color:${color}`);
      stops[1].setAttribute('style', `stop-color:${darker(color, 20)}`);
    }

    // Helper function to darken a color
    function darker(color, percent) {
      const r = parseInt(color.substr(1, 2), 16);
      const g = parseInt(color.substr(3, 2), 16);
      const b = parseInt(color.substr(5, 2), 16);

      const newR = Math.round(r * (100 - percent) / 100);
      const newG = Math.round(g * (100 - percent) / 100);
      const newB = Math.round(b * (100 - percent) / 100);

      const newColor = `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
      return newColor;
    }
  </script>
</svg>
